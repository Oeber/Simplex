/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simplex;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author oeber
 */
//        jTable1.removeColumn(jTable1.getColumnModel().getColumn(0));
//    TableColumn column1 = jTable1.getTableHeader().getColumnModel().getColumn(0);
//    column1.setHeaderValue("aaaaaa");
//    jTable1.addColumn(column1);
public class SimplexTable extends javax.swing.JFrame {

    int pivocoluna;
    int pivolinha;
    int res;
    int sidup;
    int au;

    /**
     * Creates new form NewJFrame
     */
    public SimplexTable() {
        initComponents();
        pivocoluna = 0;
        res = 0;
        au = 1;
        sidup = 1;
        jRadioButton1.setActionCommand("Max(Z)");
        jRadioButton2.setActionCommand("Min(Z)");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Calcular");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);

        jLabel1.setText("Arquivo:");

        jButton2.setText("Procurar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(1);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setAutoscrolls(false);
        jScrollPane4.setViewportView(jTextArea1);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(1);
        jTextArea2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setAutoscrolls(false);
        jScrollPane5.setViewportView(jTextArea2);

        jLabel2.setText("Variaveis");

        jLabel3.setText("Basicas:");

        jLabel4.setText("Variaveis");

        jLabel5.setText("NÃ£o Basicas:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(4, 4, 4)
                .addComponent(jLabel3)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addContainerGap())
        );

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Max(Z)");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Min(Z)");
        jRadioButton2.setActionCommand("Max(Z)");

        jTextField2.setEditable(false);

        jLabel6.setText("Valor de Z:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jTextField1.getText().equals("")) {
            JOptionPane.showMessageDialog(this,
                    "Escolha um arquivo",
                    "Aviso",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            resolv();
            if (buttonGroup1.getSelection().getActionCommand().equals("Max(Z)")) {
                do {
                    findpivot();
                    if (res != 1) {
                        createpivot();
                        simplex();
                        count();
                    }
                } while (res != 1);
            } else if (buttonGroup1.getSelection().getActionCommand().equals("Min(Z)")) {
                do {
                    if (sidup == 1) {
                        findpivotduplex();
                    } else {
                        findpivot();
                    }
                    createpivot();
                    simplex();
                    count();
                    if (sidup == 1) {
                        duplexfind();
                    }
                    if (sidup == 0 && au == 1) {
                        ((DefaultTableModel) jTable1.getModel()).removeRow(jTable1.getRowCount() - 1);
                        au = 0;
                    }
                } while (res != 1);
            }
            detvariables();
            displayZ();
            res = 0;
            sidup=1;
            au=1;                 
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivos de Texto(*.txt)", "txt", "text");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(filter);
        int status = fc.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            jTextField1.setText(f.getPath());
            try {
                BufferedReader br = new BufferedReader(new FileReader(f));
                String linha = br.readLine().trim();
                String[] columns = linha.split(" ");
                DefaultTableModel model = new DefaultTableModel(0, 0);
                model.setColumnIdentifiers(columns);
                jTable1.setModel(model);
                Object[] lines = br.lines().toArray();
                for (int i = 0; i < lines.length; i++) {
                    String line = lines[i].toString().trim();
                    String[] row = line.split(" ");
                    model.addRow(row);
                }
            } catch (Exception ex) {
                Logger.getLogger(SimplexTable.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimplexTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimplexTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimplexTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimplexTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimplexTable().setVisible(true);
            }
        });
    }

    public static double round(double value, int places) {
        if (places < 0) {
            throw new IllegalArgumentException();
        }

        long factor = (long) Math.pow(10, places);
        value = value * factor;
        long tmp = Math.round(value);
        return (double) tmp / factor;
    }

    private void simplex() {
        double in;
        int j = 0;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            if (i == pivolinha) {
                continue;
            }
            in = Double.valueOf((String) jTable1.getValueAt(i, pivocoluna));
            in *= -1;
            for (j = 0; j < jTable1.getColumnCount(); j++) {
                double lpn, vln, nln, aux;
                String txtnmb;
                lpn = Double.valueOf((String) jTable1.getValueAt(pivolinha, j));
                vln = Double.valueOf((String) jTable1.getValueAt(i, j));
                aux = in * lpn;
                nln = aux + vln;
                nln = round(nln, 4);
                txtnmb = "" + nln;
                jTable1.setValueAt(txtnmb, i, j);
            }
        }
    }

    private void resolv() {
        String txt;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            for (int j = 0; j < jTable1.getColumnCount(); j++) {
                txt = (String) jTable1.getValueAt(i, j);
                if (txt.contains("M") || txt.contains("m")) {
                    jTable1.setValueAt("1", i, j);
                }
            }
        }

    }
    
    private void displayZ(){
        double aux;
        if (buttonGroup1.getSelection().getActionCommand().equals("Max(Z)")) {
            jTextField2.setText((String)jTable1.getValueAt(0, jTable1.getColumnCount()-1));
            jLabel6.setText("Maximo de");
        }
        else{
            aux=Double.valueOf((String)jTable1.getValueAt(0, jTable1.getColumnCount()-1));
            aux*=-1;
            jLabel6.setText("Minimo de");
            jTextField2.setText(""+aux);
        }
    }
    
    private void detvariables() {
        int loc = 0;
        String aux = "", aux2, aux3 = "";
        double valor, count = 0;
        for (int j = 1; j < jTable1.getColumnCount() - 1; j++) {
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                valor = Double.valueOf((String) jTable1.getValueAt(i, j));
                if (valor != 0) {
                    count++;
                    loc = i;
                }
            }
            valor = Double.valueOf((String) jTable1.getValueAt(loc, jTable1.getColumnCount() - 1));
            String nome = jTable1.getColumnName(j);
            if (count == 1) {

                aux2 = nome + "=" + valor;
                aux = aux + aux2 + "\n";
            } else {
                aux2 = nome + "=" + 0;
                aux3 = aux3 + aux2 + "\n";
            }
            count = 0;
        }
        jTextArea2.setText(aux);
        jTextArea1.setText(aux3);
    }

    private void findpivotduplex() {
        double numero, menor = 0;
        double mpo = Double.MAX_VALUE, aux, aux2;
        for (int i = 1; i < jTable1.getColumnCount() - 1; i++) {
            numero = Double.valueOf((String) jTable1.getValueAt(jTable1.getRowCount() - 1, i));
            if (numero < menor) {
                pivocoluna = i;
                menor = numero;
            }
        }
        if (menor == 0) {
            JOptionPane.showMessageDialog(this,
                    "Melhor Resultado Obtido",
                    "Aviso",
                    JOptionPane.INFORMATION_MESSAGE);
            res = 1;
        } else {
            for (int i = jTable1.getRowCount() - 2; i >= 0; i--) {
                aux = Double.valueOf((String) jTable1.getValueAt(i, jTable1.getColumnCount() - 1));
                aux2 = Double.valueOf((String) jTable1.getValueAt(i, pivocoluna));
                aux = aux / aux2;
                if (aux < mpo && aux > 0) {
                    mpo = aux;
                    pivolinha = i;
                }
            }
        }
    }

    private void count() {
        int coluna = 0, zeros = 0, count = 0;
        String colmname;
        double valor;
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            colmname = jTable1.getColumnName(i);
            if (colmname.contains("a") || colmname.contains("A")) {
                coluna++;
                for (int j = 0; j < jTable1.getRowCount(); j++) {
                    valor = Double.valueOf((String) jTable1.getValueAt(j, i));
                    if (valor != 0) {
                        count++;
                    }
                }
                if (count > 1) {
                    zeros++;
                }
                count = 0;
            }
        }
        if (zeros == coluna) {
            for (int i = 0; i < jTable1.getColumnCount(); i++) {
                colmname = jTable1.getColumnName(i);
                if (colmname.contains("a") || colmname.contains("A")) {
                    jTable1.removeColumn(jTable1.getColumnModel().getColumn(i));
                    i--;
                }
            }
        }
    }

    private void findpivot() {
        double numero, menor = 0;
        double mpo = Double.MAX_VALUE, aux;
        for (int i = 1; i < jTable1.getColumnCount() - 1; i++) {
            numero = Double.valueOf((String) jTable1.getValueAt(0, i));
            if (numero < menor) {
                pivocoluna = i;
                menor = numero;
            }
        }
        if (menor == 0) {
            JOptionPane.showMessageDialog(this,
                    "Melhor Resultado Obtido",
                    "Aviso",
                    JOptionPane.INFORMATION_MESSAGE);
            res = 1;
        } else {
            for (int i = 1; i < jTable1.getRowCount(); i++) {
                aux = Double.valueOf((String) jTable1.getValueAt(i, jTable1.getColumnCount() - 1)) / Double.valueOf((String) jTable1.getValueAt(i, pivocoluna));
                if (aux < mpo && aux > 0) {
                    mpo = aux;
                    pivolinha = i;
                }
            }
        }

    }

    private void duplexfind() {
        Double valor;
        valor = Double.valueOf((String) jTable1.getValueAt(jTable1.getRowCount() - 1, jTable1.getColumnCount() - 1));
        if (valor == 0) {
            sidup = 0;
        } else {
            sidup = 1;
        }
    }

    private void createpivot() {
        double numero, inout = Double.valueOf((String) jTable1.getValueAt(pivolinha, pivocoluna));
        String aux;
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            numero = Double.valueOf((String) jTable1.getValueAt(pivolinha, i));
            numero = numero / inout;
            numero = round(numero, 4);
            aux = "" + numero;
            jTable1.setValueAt(aux, pivolinha, i);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
